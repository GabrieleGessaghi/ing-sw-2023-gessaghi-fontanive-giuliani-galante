Index: src/main/java/model/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport model.cards.Card;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Handles players' shelves and cards.\r\n * @author Niccolò Galante\r\n */\r\npublic class Player {\r\n    private final String nickname;\r\n    private int points;\r\n    private boolean isFirstPlayer;\r\n    public boolean isConnected;\r\n    public List<Card> cards; //array used for common and personal cards\r\n    private final Shelf playerShelf; //reference to player's shelf\r\n\r\n    public Player(String nickname) {\r\n        //TODO: Add isfirst player and cards as parameters\r\n        cards = new ArrayList<>();\r\n        this.nickname = nickname;\r\n        playerShelf = new Shelf();\r\n    }\r\n\r\n    /**\r\n     * Getter for players' nickname.\r\n     * @author Niccolò Galante\r\n     * @return player's nickname.\r\n     */\r\n    public String getNickname() {\r\n        return nickname;\r\n    }\r\n\r\n    /**\r\n     * Getter for players' points.\r\n     * @author Niccolò Galante\r\n     * @return player's points.\r\n     */\r\n    public int getPoints() {\r\n        return points;\r\n    }\r\n\r\n    /**\r\n     * Getter for boolean to indicate if player is first.\r\n     * @author Niccolò Galante\r\n     * @return true if player is first.\r\n     */\r\n    public boolean getIsFirstPlayer() {\r\n        return isFirstPlayer;\r\n    }\r\n\r\n    /**\r\n     * Updates players' points.\r\n     * @author Niccolò Galante.\r\n     */\r\n    public void updatePoints(){\r\n        int tempPoints;\r\n        tempPoints = 0;\r\n        for(Card card: cards){\r\n            tempPoints = tempPoints + card.getPoints(playerShelf.getTiles()); //sum of points for each card\r\n        }\r\n        //TODO: check if player has already obtained points from specific card\r\n    }\r\n\r\n    /**\r\n     * Inserts tokens.\r\n     * @param tokens\r\n     * @param column\r\n     * @author Niccolò Galante.\r\n     */\r\n    public void insertTokens(Token[] tokens, int column){\r\n        //Si selezionano fino a 3 token (array); i token vanno inseriti uno ad uno controllano che non siano NOTHING, controllando ogni volta\r\n        //che la colonna scelta non sia piena (vedi FullColumnException di Shelf => si deve usare try e catch);\r\n        //con catch si può usare IllegalMoveException\r\n        //se è piena bisogna eliminare i token già inseriti\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/Player.java b/src/main/java/model/Player.java
--- a/src/main/java/model/Player.java	(revision 71945b683a32ce34a22ec94b6daf666265691bca)
+++ b/src/main/java/model/Player.java	(date 1679997566193)
@@ -57,7 +57,7 @@
      */
     public void updatePoints(){
         int tempPoints;
-        tempPoints = 0;
+        tempPoints = points;
         for(Card card: cards){
             tempPoints = tempPoints + card.getPoints(playerShelf.getTiles()); //sum of points for each card
         }
@@ -66,15 +66,14 @@
 
     /**
      * Inserts tokens.
-     * @param tokens
-     * @param column
+     * @param tokens tokens to insert in shelf.
+     * @param column column in which tokens are to be inserted.
      * @author Niccolò Galante.
      */
     public void insertTokens(Token[] tokens, int column){
-        //Si selezionano fino a 3 token (array); i token vanno inseriti uno ad uno controllano che non siano NOTHING, controllando ogni volta
-        //che la colonna scelta non sia piena (vedi FullColumnException di Shelf => si deve usare try e catch);
-        //con catch si può usare IllegalMoveException
-        //se è piena bisogna eliminare i token già inseriti
+        //Si selezionano fino a 3 token (array); i token vanno inseriti uno ad uno controllando che non siano NOTHING,
+        //controllando ogni volta che la colonna scelta non sia piena (vedi FullColumnException di Shelf => si deve usare
+        //try e catch) con catch si può usare IllegalMoveException; se column è piena bisogna eliminare i token già inseriti ()
     }
 
 }
